
                                          //NQUEENS

#include<iostream>
using namespace std;

bool issafe(int **a,int x ,int y,int n){

for(int row=0;row<x;row++){
    if(a[row][y]==1){
        return false;
    }
}

int row=x;
int col=y;
while(row>=0 && col>=0){
    if(a[row][col]==1){
        return false;
    }
row--;
col--;
}

row=x;
col=y;
while(row>=0 && col<n){
    if(a[row][col]==1){
        return false;
    }
row--;
col++;
}

return true;

}

bool nqueen(int **a ,int x, int n){
    if(x>=n){
        return true;
    }

    for(int col=0;col<n;col++){
        if(issafe(a,x,col,n)){
            a[x][col]=1;
            if(nqueen(a,x+1,n)){
                return true;
    }
      a[x][col]=0;   //backtrack

      }
      }
      return false;
}

int main()  {
int n;
cin>>n;
int **a=new int*[n];
for(int i=0;i<n;i++){
    a[i]=new int[n];
    for(int j=0;j<n;j++){
        a[i][j]=0;
    }
}

if (nqueen(a,0,n)){
    for(int i=0;i<n;i++){
    for(int j=0;j<n;j++){
       cout<< a[i][j]<<" ";
    }
    cout<<endl;
}
}
return 0;
}

                                          //MERGE
#include<iostream>
using namespace std;

void merge(int arr[],int l,int mid,int r){

    int n1=mid-l+1;
    int n2=r-mid;

    int a[n1], b[n2];

    for(int i=0;i<n1;i++){
        a[i]=arr[l+i];
    }
    for(int j=0;j<n2;j++){
        b[j]=arr[mid+1+j];
    }
    int i=0,j=0,k=l;
    while(i<n1 && j<n2){
        if(a[i]<=b[j]){
            arr[k]=a[i];
            i++;
            k++;
        }
        else{
            arr[k]=b[j];
            j++;
            k++;
        }

    }
    while(i<n1){
        arr[k]=a[i];
        i++;
        k++;
    }
    while(j<n2){
        arr[k]=b[j];
        j++;
        k++;
    }
}

    void mergesort(int arr[],int l,int r){
        if(l<r){
            int mid=(l+r)/2;
            mergesort(arr,l,mid);
            mergesort(arr,mid+1,r);
            merge(arr,l,mid,r);
        }
    }

    int main(){
        int arr[]={12,11,13,5,6,7};
        mergesort(arr,0,5);
        for (int i = 0; i < 6; i++)
        {
        cout<<arr[i]<<" ";
        }
        
    return 0;
}
                                                   //DJIKSTRA
#include <bits/stdc++.h>
using namespace std;

const int inf = 1e7;

int main() {
    int nodes, edges;
    cin >> nodes >> edges;

    // Initialize the graph as an adjacency list
    vector<vector<pair<int, int>>> graph(nodes + 1);
    
    // Initialize distance array with infinity
    vector<int> dist(nodes + 1, inf);

    // Read edges and weights
    for (int i = 0; i < edges; ++i) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u].push_back({v, w});
        graph[v].push_back({u, w});
    }

    int source;
    cin >> source;
    dist[source] = 0;

    // Using a priority queue (min-heap) to store the vertices by their current distance
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, source});

    // Dijkstra's algorithm
    while (!pq.empty()) {
        auto node = pq.top();
        pq.pop();
        int v = node.second;
        int v_dist = node.first;

        // If the current distance is greater than the already found distance, skip it
        if (v_dist > dist[v]) continue;

        // Traverse through all neighbors of vertex v
        for (auto child : graph[v]) {
            int child_v = child.first;
            int w = child.second;
            // Relaxation step
            if (dist[v] + w < dist[child_v]) {
                dist[child_v] = dist[v] + w;
                pq.push({dist[child_v], child_v});
            }
        }
    }
    // Output distances from source to all nodes
    for (int i = 1; i <= nodes; ++i) {
        cout << "Distance from " << source << " to " << i << " is ";
        if (dist[i] == inf) cout << "INF" << endl;
        else cout << dist[i] << endl;
    }

    return 0;
}
                                                             //FLOYD
#include<bits/stdc++.h>
using namespace std;
const int INF = 1e9;

int main(){

    vector<vector<int>> graph={
        {0,5,INF,10},
        {INF,0,3,INF},
        {INF,INF,0,1},
        {INF,INF,INF,0},
    };
    int n = graph.size();
    vector<vector<int>> dist=graph;
    for(int k=0;k<n;k++){
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
              dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);
            }
        }
    }
    
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
             if(dist[i][j]==INF)
             cout<<"INF ";
             else
             cout<<dist[i][j]<<" ";

            }
            cout<<endl;
        }
    

}
                                                                              //KSDP
#include <iostream>
#include <vector>

using namespace std;

int knapsackDP(int W, const vector<int>& weights, const vector<int>& values) {
 int n = weights.size();
 vector<vector<int>> dp(n+1, vector<int>(W+1, 0));
 
 for(int i=1; i<=n; ++i) {
  for(int j=0; j<=W; ++j) {
   if (weights[i-1] <= j) {
    dp[i][j] = max(dp[i-1][j], dp[i-1][j-weights[i-1]] + values[i-1]);
   } else {
    dp[i][j] = dp[i-1][j];
   }
  }
 }
 return dp[n][W];
}

int main() {
 int W = 50;
 vector<int> weights = {10, 20, 30};
 vector<int> values = {60, 100, 120};
 
 cout<< "Maximum value in knapsack = "<< knapsackDP(W, weights, values) <<endl;
 return 0;
}
                                                                                    //KSGREEDY
#include <iostream>
#include <algorithm>
using namespace std;

struct Item {
    int profit, weight, index; 
};

bool compare(Item a, Item b) {
    double r1 = (double)a.profit / a.weight;
    double r2 = (double)b.profit / b.weight;
    return r1 > r2;
}

double fractional_knapsack(int W, Item items[], int n) {
    sort(items, items + n, compare);
    double totalprofit = 0.0;

    cout << "\nItems added to the knapsack:\n";
    cout << "Item\tProfit\tWeight\tFraction\n";
    
    for (int i = 0; i < n; i++) {
        if (items[i].weight <= W) {
            W = W - items[i].weight;
            totalprofit = totalprofit + items[i].profit;
            cout << items[i].index + 1 << "\t" << items[i].profit << "\t" << items[i].weight << "\t 1.0 \n";
        } else {
            double fraction = (double)W / items[i].weight;
            totalprofit = totalprofit + items[i].profit * fraction;
            cout << items[i].index + 1 << "\t" << items[i].profit << "\t" << items[i].weight << "\t" << fraction << "\n";
            break;
        }
    }

    return totalprofit;
}

int main() {
    int n, W;
    cout << "Enter the number of items: ";
    cin >> n;
    Item items[n];
    cout << "Enter weight and profit of each item:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> items[i].weight >> items[i].profit;
        items[i].index = i;
    }
    cout << "Enter the maximum capacity of the knapsack: ";
    cin >> W;
    double maxprofit = fractional_knapsack(W, items, n);
    cout << "\nMaximum profit of the Knapsack = " << maxprofit << endl;

    return 0;
}
                                                                          //OPTMERGEP
#include<iostream>
#include<queue>
#include<vector>

using namespace std;

int main(){
    cout<<"input";
int n;
cin>>n;

vector<int> a(n);
cout<<"ENTER ELEMENTS"<<endl;
for(int i=0;i<n;i++){
    cin>>a[i];
}
priority_queue<int, vector<int> ,greater<int>> minheap;

    for(int i=0;i<n;i++){
        minheap.push(a[i]);
    }
int ans=0;

while(minheap.size()>1){
    int e1=minheap.top();
    minheap.pop();
    int e2=minheap.top();
    minheap.pop();
    ans+=e1+e2;
    minheap.push(e1+e2);
}
cout<<ans;

return 0;
}

                                                                          //PRIMS
#include<iostream>
#define I INT32_MAX
using namespace std;

   int i,j,u,v,k;
        int n=7;
       

int cost[8][8]{
    {I,I,I,I,I,I,I,I},
    {I,I,25,I,I,I,5,I},
    {I,25,I,12,I,I,I,10},
    {I,I,12,I,8,I,I,I},
    {I,I,I,8,I,16,I,14},
    {I,I,I,I,16,I,20,18},
    {I,5,I,I,I,20,I,I},
    {I,I,10,I,14,18,I,I}};

    int near[8]={I,I,I,I,I,I,I,I};

    int t[2][6];

void prim(){
   int min=I;
            for(i=1;i<=n;i++)
            {
                for(j=i;j<=n;j++){
                    if(cost[i][j]<min)
                    {
                        min=cost[i][j];
                        u=i;
                        v=j;
                    }
                }
            }
            t[0][0]=u;
            t[1][0]=v;
            near[u]=near[v]=0;

            for(i=1;i<=n;i++){
                if(near[i]!=0){
                if(cost[i][u]<cost[i][v]){
                    near[i]=u;
                }
                else{
                    near[i]=v;
                }
            }
            }
            for(i=1;i<n-1;i++){
                min=I;
                for(j=1;j<=n;j++){
                    if(near[j]!=0 && cost[j][near[j]]<min){
                        k=j;
                        min=cost[j][near[j]];
                    }
                }
                t[0][i]=k;
                t[1][i]=near[k];
                near[k]=0;

                for(j=1;j<=n;j++){
                    if(near[j]!=0 && cost[j][k]<cost[j][near[j]])
                    near[j]=k;
                }
            }

            for(i=0;i<n-1;i++){
                cout<<"("<<t[0][i]<<","<<t[1][i]<<")"<<endl;
            }

        }

    int main(){

     prim();    

   return 0;
    }


                                                                           //QUICK
#include<iostream>
using namespace std;
int partition(int a[],int l,int h){
int i=l;
int j=h;
     
     int pivot=a[l];
    
   do{ 
    do{i++;}while(a[i]<=a[l]);
    do{j--;}while(a[j]>a[l]);
   
    if(i<j)
    swap(a[i],a[j]);
   }while(i<j);
     
   swap(a[l],a[j]);
   return j;
}


void quicksort(int a[],int l,int h){
    int p;
    if(l<h){
        p=partition(a,l,h);
        quicksort(a,l,p);
        quicksort(a,p+1,h);
    }
  
}

int main(){
    int i;
    int a[]={5,3,1,7,6,2};
   quicksort(a,0,6);
    for(i=0;i<6;i++)
    cout<<a[i]<<" ";


    return 0;
}
                                                              //LIN&BIN

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Linear Search (Recursive)
int linearSearch(const vector<int>& arr, int target, int index = 0) {
    if (index >= arr.size()) return -1; // Element not found
    if (arr[index] == target) return index; // Element found
    return linearSearch(arr, target, index + 1); // Recurse
}

// Binary Search (Recursive)
int binarySearch(const vector<int>& arr, int target, int low, int high) {
    if (low > high) return -1; // Element not found
    int mid = low + (high - low) / 2;
    if (arr[mid] == target) return mid; // Element found
    else if (arr[mid] > target) return binarySearch(arr, target, low, mid - 1);
    return binarySearch(arr, target, mid + 1, high);
}

int main() {
    vector<int> arr = {1, 3, 5, 7, 9, 11, 13, 15};
    int target;
    cout << "Enter the element to search: ";
    cin >> target;
    
    // Linear Search
    int linearResult = linearSearch(arr, target);
    cout << (linearResult != -1 ? "Found at index " + to_string(linearResult) : "Not found") << endl;

    // Binary Search (assuming array is sorted)
    int binaryResult = binarySearch(arr, target, 0, arr.size() - 1);
    cout << (binaryResult != -1 ? "Found at index " + to_string(binaryResult) : "Not found") << endl;

    return 0;
}

                                                 //KRUSKAL
#include <algorithm>
#include <iostream>
#include <vector>

using namespace std;

struct Edge {
  int u, v, weight;
  bool operator<(const Edge &other) const { return weight < other.weight; }
};

struct DisjointSet {
  vector<int> parent, rank;

  DisjointSet(int n) {
    parent.resize(n);
    rank.resize(n, 0);
    for (int i = 0; i < n; ++i) {
      parent[i] = i;
    }
  }

  int find(int u) {
    if (u != parent[u]) {
      parent[u] = find(parent[u]);
    }
    return parent[u];
  }

  void unionSets(int u, int v) {
    int rootU = find(u);
    int rootV = find(v);

    if (rootU != rootV) {
      if (rank[rootU] > rank[rootV]) {
        parent[rootV] = rootU;
      } else if (rank[rootU] < rank[rootV]) {
        parent[rootU] = rootV;
      } else {
        parent[rootV] = rootU;
        rank[rootU]++;
      }
    }
  }
};

vector<Edge> kruskalMST(int n, vector<Edge> &edges) {
  sort(edges.begin(), edges.end());

  DisjointSet ds(n);
  vector<Edge> mst;

  for (const Edge &edge : edges) {
    if (ds.find(edge.u) != ds.find(edge.v)) {
      mst.push_back(edge);
      ds.unionSets(edge.u, edge.v);
    }
  }

  return mst;
}

int main() {
  int n, m;

  cout << "Enter the number of vertices: ";
  cin >> n;

  cout << "Enter the number of edges: ";
  cin >> m;

  vector<Edge> edges(m);

  cout << "Enter each edge as three space-separated integers (u v weight):"
       << endl;
  for (int i = 0; i < m; ++i) {
    cin >> edges[i].u >> edges[i].v >> edges[i].weight;
  }

  vector<Edge> mst = kruskalMST(n, edges);

  cout << "Edges in the Minimum Spanning Tree:" << endl;
  for (const Edge &edge : mst) {
    cout << edge.u << " - " << edge.v << " : " << edge.weight << endl;
  }

  return 0;
}


